<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    var count = 4;
    List<(string Name, string Type, string FriendlyType)> types = [
        ("String",  "string?",      "string?"                           ),
        ("Strings", "string[]?",    "List<string>?"                     ),
        ("Item",    "ITaskItem?",   "Dictionary<string, string>?"       ),
        ("Items",   "ITaskItem[]?", "List<Dictionary<string, string>>?" ),
    ];
    string DicToHt(string t) => t.Replace("Dictionary<string, string>", "Hashtable").Replace("?", "");
#>
//<auto-generated/>
#pragma warning disable
#nullable enable

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.Build.Framework;

namespace Alba.Build.PowerShell;

public partial class ScriptParams
{
<# foreach (var type in types) for (var i = 1; i <= count; i++) { #>
    public <#=type.FriendlyType#> <#=type.Name#><#=i#> { get; set; }
<# } #>

<# foreach (var type in types.Where(t => !t.Type.Contains("string"))) for (var i = 1; i <= count; i++) { #>
    public <#=DicToHt(type.FriendlyType)#> Out<#=type.Name#><#=i#> { get; set; } = [ ];
<# } #>

    public void CopyFromTask(ExecPowerShell task)
    {
<#    foreach (var type in types) for (var i = 1; i <= count; i++) { #>
        <#=type.Name#><#=i#> = CopyFrom(task.In<#=type.Name#><#=i#>);
<#    } #>
    }

    public void CopyToTask(ExecPowerShell task)
    {
<#    foreach (var type in types) for (var i = 1; i <= count; i++) { #>
<#     if (type.Type.Contains("string")) { #>
        task.Out<#=type.Name#><#=i#> = CopyFrom(<#=type.Name#><#=i#>);
<#     } else { #>
        task.Out<#=type.Name#><#=i#> = CopyFrom(Out<#=type.Name#><#=i#>);
<#     } #>
<#    } #>
<#    foreach (var type in types.Where(t => !t.Type.Contains("string"))) for (var i = 1; i <= count; i++) { #>
        Update(<#=type.Name#><#=i#>, task.In<#=type.Name#><#=i#>);
<#    } #>
    }
}

public partial class ExecPowerShell
{
<# foreach (var type in types) for (var i = 1; i <= count; i++) { #>
    public <#=type.Type#> In<#=type.Name#><#=i#> { get; set; }
<# } #>
<# foreach (var type in types) for (var i = 1; i <= count; i++) { #>
<#     if (type.Type.Contains("string")) { #>
    [Output] public <#=type.Type#> Out<#=type.Name#><#=i#> { get; set; }
<#     } else { #>
    [Output] public <#=type.Type#> Out<#=type.Name#><#=i#> { get; set; }
<#     } #>
<# } #>
}