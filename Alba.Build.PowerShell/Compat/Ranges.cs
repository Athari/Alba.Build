//<auto-generated/>
#nullable enable
#pragma warning disable

#if !NETCOREAPP3_0_OR_GREATER && !NET5_0_OR_GREATER

using System.Runtime.CompilerServices;
using System.Text;

namespace System;

public readonly struct Range : IEquatable<Range>
{
    public Index Start { get; }

    public Index End { get; }

    public Range(Index start, Index end)
    {
        Start = start;
        End = end;
    }

    public override bool Equals(object? value) =>
        value is Range r &&
        r.Start.Equals(Start) &&
        r.End.Equals(End);

    public bool Equals(Range other) => other.Start.Equals(Start) && other.End.Equals(End);

    public override int GetHashCode()
    {
        return Combine(Start.GetHashCode(), End.GetHashCode());
    }

    public override string ToString()
    {
        var sb = StringBuilderCache.Acquire(2 + (2 * 11));

        if (Start.IsFromEnd) {
            sb.Append('^');
        }

        sb.Append((uint)Start.Value);
        sb.Append("..");

        if (End.IsFromEnd) {
            sb.Append('^');
        }

        sb.Append((uint)End.Value);

        return StringBuilderCache.GetStringAndRelease(sb);
    }

    public static Range StartAt(Index start) => new(start, Index.End);

    public static Range EndAt(Index end) => new(Index.Start, end);

    public static Range All => new(Index.Start, Index.End);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public (int Offset, int Length) GetOffsetAndLength(int length)
    {
        int start;
        Index startIndex = Start;
        if (startIndex.IsFromEnd)
            start = length - startIndex.Value;
        else
            start = startIndex.Value;

        int end;
        Index endIndex = End;
        if (endIndex.IsFromEnd)
            end = length - endIndex.Value;
        else
            end = endIndex.Value;

        if ((uint)end > (uint)length || (uint)start > (uint)end) {
            throw new ArgumentOutOfRangeException();
        }

        return (start, end - start);
    }

    private static int Combine<T1, T2>(T1 value1, T2 value2)
    {
        return HashCode.Combine(value1?.GetHashCode() ?? 0, value2?.GetHashCode() ?? 0);
    }
}

public readonly struct Index : IEquatable<Index>
{
    private readonly int _value;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Index(int value, bool fromEnd = false)
    {
        if (value < 0) {
            throw new ArgumentOutOfRangeException(nameof(value));
        }

        if (fromEnd)
            _value = ~value;
        else
            _value = value;
    }

    private Index(int value)
    {
        _value = value;
    }

    public static Index Start => new(0);

    public static Index End => new(~0);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Index FromStart(int value)
    {
        if (value < 0) {
            throw new ArgumentOutOfRangeException(nameof(value));
        }

        return new(value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Index FromEnd(int value)
    {
        if (value < 0) {
            throw new ArgumentOutOfRangeException(nameof(value));
        }

        return new(~value);
    }

    public int Value
    {
        get
        {
            if (_value < 0)
                return ~_value;
            else
                return _value;
        }
    }

    public bool IsFromEnd => _value < 0;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetOffset(int length)
    {
        int offset = _value;
        if (IsFromEnd) {
            offset += length + 1;
        }
        return offset;
    }

    public override bool Equals(object? value) => value is Index index && _value == index._value;

    public bool Equals(Index other) => _value == other._value;

    public override int GetHashCode() => _value;

    public static implicit operator Index(int value) => FromStart(value);

    public override string ToString()
    {
        if (IsFromEnd)
            return ToStringFromEnd();

        return ((uint)Value).ToString();
    }

    private string ToStringFromEnd()
    {
        var sb = StringBuilderCache.Acquire(11);

        sb.Append((uint)Value);
        sb.Append('^');

        return StringBuilderCache.GetStringAndRelease(sb);
    }
}

file static class StringBuilderCache
{
    private const int MaxBuilderSize = 360;
    private const int DefaultCapacity = 16;

    [ThreadStatic]
    private static StringBuilder? t_cachedInstance;

    public static StringBuilder Acquire(int capacity = DefaultCapacity)
    {
        if (capacity <= MaxBuilderSize) {
            StringBuilder? sb = t_cachedInstance;
            if (sb != null) {
                if (capacity <= sb.Capacity) {
                    t_cachedInstance = null;
                    sb.Clear();
                    return sb;
                }
            }
        }

        return new(capacity);
    }

    public static void Release(StringBuilder sb)
    {
        if (sb.Capacity <= MaxBuilderSize) {
            t_cachedInstance = sb;
        }
    }

    public static string GetStringAndRelease(StringBuilder sb)
    {
        string result = sb.ToString();
        Release(sb);
        return result;
    }
}

#endif