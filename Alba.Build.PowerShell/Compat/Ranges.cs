//<auto-generated/>
#pragma warning disable

#if ANCIENT

using System.Runtime.CompilerServices;
using System.Text;

namespace System
{
    public readonly struct Range : IEquatable<Range>
    {
        public Index Start { get; }

        public Index End { get; }

        public Range(Index start, Index end)
        {
            Start = start;
            End = end;
        }

        public override bool Equals(object value) =>
            value is Range r &&
            r.Start.Equals(Start) &&
            r.End.Equals(End);

        public bool Equals(Range other) => other.Start.Equals(Start) && other.End.Equals(End);

        public override int GetHashCode()
        {
            return Combine(Start.GetHashCode(), End.GetHashCode());
        }

        public override string ToString()
        {
            var sb = StringBuilderCache.Acquire(2 + (2 * 11));

            if (Start.IsFromEnd) {
                sb.Append('^');
            }

            sb.Append((uint)Start.Value);
            sb.Append("..");

            if (End.IsFromEnd) {
                sb.Append('^');
            }

            sb.Append((uint)End.Value);

            return StringBuilderCache.GetStringAndRelease(sb);
        }

        public static Range StartAt(Index start) => new Range(start, Index.End);

        public static Range EndAt(Index end) => new Range(Index.Start, end);

        public static Range All => new Range(Index.Start, Index.End);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public (int Offset, int Length) GetOffsetAndLength(int length)
        {
            int start;
            Index startIndex = Start;
            if (startIndex.IsFromEnd)
                start = length - startIndex.Value;
            else
                start = startIndex.Value;

            int end;
            Index endIndex = End;
            if (endIndex.IsFromEnd)
                end = length - endIndex.Value;
            else
                end = endIndex.Value;

            if ((uint)end > (uint)length || (uint)start > (uint)end) {
                throw new ArgumentOutOfRangeException();
            }

            return (start, end - start);
        }

        private static int Combine<T1, T2>(T1 value1, T2 value2)
        {
            return HashCode.Combine(value1?.GetHashCode() ?? 0, value2?.GetHashCode() ?? 0);
        }
    }

    public readonly struct Index : IEquatable<Index>
    {
        private readonly int _value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Index(int value, bool fromEnd = false)
        {
            if (value < 0) {
                throw new ArgumentOutOfRangeException(nameof(value));
            }

            if (fromEnd)
                _value = ~value;
            else
                _value = value;
        }

        private Index(int value)
        {
            _value = value;
        }

        public static Index Start => new Index(0);

        public static Index End => new Index(~0);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Index FromStart(int value)
        {
            if (value < 0) {
                throw new ArgumentOutOfRangeException(nameof(value));
            }

            return new Index(value);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Index FromEnd(int value)
        {
            if (value < 0) {
                throw new ArgumentOutOfRangeException(nameof(value));
            }

            return new Index(~value);
        }

        public int Value
        {
            get
            {
                if (_value < 0)
                    return ~_value;
                else
                    return _value;
            }
        }

        public bool IsFromEnd => _value < 0;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetOffset(int length)
        {
            int offset = _value;
            if (IsFromEnd) {
                offset += length + 1;
            }
            return offset;
        }

        public override bool Equals(object value) => value is Index && _value == ((Index)value)._value;

        public bool Equals(Index other) => _value == other._value;

        public override int GetHashCode() => _value;

        public static implicit operator Index(int value) => FromStart(value);

        public override string ToString()
        {
            if (IsFromEnd)
                return ToStringFromEnd();

            return ((uint)Value).ToString();
        }

        private string ToStringFromEnd()
        {
            var sb = StringBuilderCache.Acquire(11);

            sb.Append((uint)Value);
            sb.Append('^');

            return StringBuilderCache.GetStringAndRelease(sb);
        }
    }

    internal static class StringBuilderCache
    {
        private const int MaxBuilderSize = 360;
        private const int DefaultCapacity = 16;

        [ThreadStatic]
        private static StringBuilder t_cachedInstance;

        public static StringBuilder Acquire(int capacity = DefaultCapacity)
        {
            if (capacity <= MaxBuilderSize) {
                StringBuilder sb = t_cachedInstance;
                if (sb != null) {
                    if (capacity <= sb.Capacity) {
                        t_cachedInstance = null;
                        sb.Clear();
                        return sb;
                    }
                }
            }

            return new StringBuilder(capacity);
        }

        public static void Release(StringBuilder sb)
        {
            if (sb.Capacity <= MaxBuilderSize) {
                t_cachedInstance = sb;
            }
        }

        public static string GetStringAndRelease(StringBuilder sb)
        {
            string result = sb.ToString();
            Release(sb);
            return result;
        }
    }

    namespace Runtime.CompilerServices
    {
        public static partial class RuntimeHelpers
        {
            public static int get_IndexerExtension(this int[] array, Index index) =>
                index.IsFromEnd ? array[array.Length - index.Value] : array[index.Value];

            public static int get_IndexerExtension(this Span<int> span, Index index) =>
                index.IsFromEnd ? span[span.Length - index.Value] : span[index.Value];

            public static char get_IndexerExtension(this string s, Index index) =>
                index.IsFromEnd ? s[s.Length - index.Value] : s[index.Value];

            public static Span<int> get_IndexerExtension(this int[] array, Range range) =>
                array.Slice(range);

            public static Span<int> get_IndexerExtension(this Span<int> span, Range range) =>
                span.Slice(range);

            public static string get_IndexerExtension(this string s, Range range) =>
                s.Substring(range);

            public static Span<T> Slice<T>(this T[] array, Range range)
                => array.AsSpan().Slice(range);

            public static Span<T> Slice<T>(this Span<T> span, Range range)
            {
                var (start, length) = GetStartAndLength(range, span.Length);
                return span.Slice(start, length);
            }

            public static string Substring(this string s, Range range)
            {
                var (start, length) = GetStartAndLength(range, s.Length);
                return s.Substring(start, length);
            }

            private static (int start, int length) GetStartAndLength(Range range, int entityLength)
            {
                var start = range.Start.IsFromEnd ? entityLength - range.Start.Value : range.Start.Value;
                var end = range.End.IsFromEnd ? entityLength - range.End.Value : range.End.Value;
                var length = end - start;

                return (start, length);
            }

            public static T[] GetSubArray<T>(T[] array, Range range)
            {
                if (array == null) {
                    throw new ArgumentNullException(nameof(array));
                }

                (int offset, int length) = range.GetOffsetAndLength(array.Length);

                if (default(T) != null || typeof(T[]) == array.GetType()) {
                    if (length == 0) {
                        return Array.Empty<T>();
                    }

                    var dest = new T[length];
                    Array.Copy(array, offset, dest, 0, length);
                    return dest;
                }
                else {
                    T[] dest = (T[])Array.CreateInstance(array.GetType().GetElementType(), length);
                    Array.Copy(array, offset, dest, 0, length);
                    return dest;
                }
            }
        }
    }
}
#endif